****** NOTE *******
This Kafka Project has 2 application called Producer and Consumer. In Producer application, There is readme file to
run the application. First, Start the Docker,  go the the docker-compose-multi-broker.yml path and run the docker compose
in step 2. Start the Producer application and Consumer application. Hit the POST command in producer app from the file 'curl-commands.txt'.
check the consumer app where the produced message are consumed and verify the h2 database.
You can check for PUT method for updating the message.

Step 1: Start the Docker
Step 2: Go to the resources folder and run the below command
        a) docker compose -f docker-compose-multi-broker.yml up
Step 3: Run the Spring Boot application

Step 4: After running the application, Verfiy the created Kafka Topic called "library-events" by below command
         at any terminal(both command together).
       a) docker exec --interactive --tty kafka1  \
          kafka-topics --bootstrap-server kafka1:19092 --list

          Output: library-events

Step 5: To know more about the "library-event" topic and it's replica.

       a) docker exec --interactive --tty kafka1  \
          kafka-topics --bootstrap-server kafka1:19092 --describe \ --topic library-events

          Output:

          Topic: library-events   TopicId: NFcz64AcTcW4UwMIk_Hf5g PartitionCount: 3       ReplicationFactor: 3    Configs:
                  Topic: library-events   Partition: 0    Leader: 3       Replicas: 3,2,1 Isr: 3,2,1
                  Topic: library-events   Partition: 1    Leader: 1       Replicas: 1,3,2 Isr: 1,3,2
                  Topic: library-events   Partition: 2    Leader: 2       Replicas: 2,1,3 Isr: 2,1,3


==============================================================================================================
Test the POST /v1/libraryevent endpoint.
==============================================================================================================

Step 1: Start the Docker
Step 2: Go to the resources folder and run the below command
        a) docker compose -f docker-compose-multi-broker.yml up
Step 3: Run the Spring Boot application

Step 4: Run the curl command to check the /v1/libraryevent endpoint
        % curl -i \
        -d '{"libraryEventId":null,"libraryEventType": "NEW","book":{"bookId":456,"bookName":"Kafka Using Spring Boot","bookAuthor":"Dilip"}}' \
        -H "Content-Type: application/json" \
        -X POST http://localhost:8080/v1/libraryevent

        Output::

        HTTP/1.1 201
        Content-Type: application/json
        Transfer-Encoding: chunked
        Date: Sat, 28 Jun 2025 07:53:45 GMT

Step 5: To Consume the message at Step 4 from the Topic, run the below command:

        % docker exec --interactive --tty kafka1  \
        kafka-console-consumer --bootstrap-server localhost:9092,kafka2:19093,kafka3:19094 \
                               --topic library-events \
                               --from-beginning

        Output::

        {"libraryEventId":null,"libraryEventType":"NEW","book":{"bookId":456,"bookName":"Kafka Using Spring Boot","bookAuthor":"Dilip"}}


==============================================================================================================
Test the PUT /v1/libraryevent endpoint.
==============================================================================================================

Step 1: Start the Docker
Step 2: Go to the resources folder and run the below command
        a) docker compose -f docker-compose-multi-broker.yml up
Step 3: Run the Spring Boot application

Step 4:
      curl -i \
      -d '{"libraryEventId":1,"libraryEventType": "UPDATE","book":{"bookId":456,"bookName":"Kafka Using Spring Boot 2.X","bookAuthor":"Dilip"}}' \
      -H "Content-Type: application/json" \
      -X PUT http://localhost:8080/v1/libraryevent

      OUTPUT:

      HTTP/1.1 200
      Content-Type: application/json
      Transfer-Encoding: chunked
      Date: Mon, 30 Jun 2025 07:13:17 GMT

      {"libraryEventId":1,"libraryEventType":"UPDATE","book":{"bookId":456,"bookName":"Kafka Using Spring Boot 2.X","bookAuthor":"Dilip"}}%





